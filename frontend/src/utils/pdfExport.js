// PDF Export Utility
import jsPDF from 'https://cdn.skypack.dev/jspdf';

export const exportTimetableToPDF = (timetable, filename = 'timetable.pdf') => {
  try {
    // Create new PDF document
    const doc = new jsPDF('landscape', 'mm', 'a4');
    
    // Set up fonts and colors
    doc.setFont('helvetica');
    
    // Title
    doc.setFontSize(20);
    doc.setTextColor(40, 40, 40);
    doc.text(`${timetable.department.toUpperCase()} - LEVEL ${timetable.level}`, 20, 20);
    
    // Subtitle
    doc.setFontSize(14);
    doc.setTextColor(100, 100, 100);
    doc.text(`${timetable.semester.charAt(0).toUpperCase() + timetable.semester.slice(1)} Semester Timetable`, 20, 30);
    
    // Created by info
    doc.setFontSize(10);
    doc.setTextColor(120, 120, 120);
    doc.text(`Created by: ${timetable.createdBy?.name || 'Unknown'}`, 20, 40);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
    
    // Table setup
    const startY = 55;
    const cellHeight = 12;
    const timeCellWidth = 30;
    const dayCellWidth = 32;
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
    const timeSlots = ['8:00 AM - 10:00 AM', '10:00 AM - 12:00 PM', '12:00 PM - 2:00 PM', '2:00 PM - 4:00 PM'];
    
    // Draw table headers
    doc.setFillColor(74, 144, 226); // Primary blue
    doc.setDrawColor(74, 144, 226);
    doc.setLineWidth(0.5);
    
    // Time column header
    doc.rect(20, startY, timeCellWidth, cellHeight, 'FD');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(10);
    doc.text('TIME', 20 + timeCellWidth/2, startY + cellHeight/2, { align: 'center' });
    
    // Day headers
    days.forEach((day, index) => {
      const x = 20 + timeCellWidth + (index * dayCellWidth);
      doc.rect(x, startY, dayCellWidth, cellHeight, 'FD');
      doc.setTextColor(255, 255, 255); // Ensure white text
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text(day.substring(0, 3).toUpperCase(), x + dayCellWidth/2, startY + cellHeight/2, { align: 'center' });
    });
    
    // Draw time slots and courses
    timeSlots.forEach((timeSlot, timeIndex) => {
      const y = startY + cellHeight + (timeIndex * cellHeight);
      
      // Time slot cell
      doc.setFillColor(248, 249, 250); // Light gray
      doc.setDrawColor(200, 200, 200);
      doc.rect(20, y, timeCellWidth, cellHeight, 'FD');
      doc.setTextColor(40, 40, 40);
      doc.setFontSize(8);
      doc.text(timeSlot, 20 + timeCellWidth/2, y + cellHeight/2, { align: 'center' });
      
      // Course cells
      days.forEach((day, dayIndex) => {
        const x = 20 + timeCellWidth + (dayIndex * dayCellWidth);
        
        // Find courses for this time slot and day
        const courses = timetable.courses.filter(course => 
          course.day === day && course.time === timeSlot
        );
        
        if (courses.length === 0) {
          // Empty cell
          doc.setFillColor(255, 255, 255);
          doc.setDrawColor(200, 200, 200);
          doc.rect(x, y, dayCellWidth, cellHeight, 'FD');
        } else {
          // Course cell
          doc.setFillColor(255, 255, 255);
          doc.setDrawColor(200, 200, 200);
          doc.rect(x, y, dayCellWidth, cellHeight, 'FD');
          
          // Add course information
          doc.setTextColor(40, 40, 40);
          doc.setFontSize(7);
          
          courses.forEach((course, courseIndex) => {
            const courseY = y + 2 + (courseIndex * 3);
            if (courseY < y + cellHeight - 1) {
              // Course code
              doc.setFontSize(8);
              doc.setFont('helvetica', 'bold');
              doc.text(course.courseCode, x + 1, courseY);
              
              // Course name (truncated if too long)
              doc.setFontSize(6);
              doc.setFont('helvetica', 'normal');
              const courseName = course.courseName.length > 15 ? 
                course.courseName.substring(0, 15) + '...' : 
                course.courseName;
              doc.text(courseName, x + 1, courseY + 2);
              
              // Venue
              doc.setFontSize(6);
              doc.setTextColor(100, 100, 100);
              doc.text(course.venue, x + 1, courseY + 4);
              doc.setTextColor(40, 40, 40);
            }
          });
        }
      });
    });
    
    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(8);
    doc.setTextColor(120, 120, 120);
    doc.text('Generated by EduSchedule Timetable Management System', 20, pageHeight - 10);
    
    // Save the PDF
    doc.save(filename);
    
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return false;
  }
};

// Alternative method using HTML to Canvas (for more complex layouts)
export const exportTimetableToPDFFromHTML = async (elementId, filename = 'timetable.pdf') => {
  try {
    // Import html2canvas dynamically
    const html2canvas = (await import('https://cdn.skypack.dev/html2canvas')).default;
    
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('Element not found');
    }
    
    // Generate canvas from HTML
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });
    
    // Create PDF
    const imgData = canvas.toDataURL('image/png');
    const doc = new jsPDF('landscape', 'mm', 'a4');
    
    const imgWidth = doc.internal.pageSize.getWidth();
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    doc.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
    doc.save(filename);
    
    return true;
  } catch (error) {
    console.error('Error generating PDF from HTML:', error);
    return false;
  }
};

// Enhanced PDF export with better formatting
export const exportTimetableToPDFEnhanced = (timetable, filename = 'timetable.pdf') => {
  try {
    // Create new PDF document
    const doc = new jsPDF('landscape', 'mm', 'a4');
    
    // Set up fonts and colors
    doc.setFont('helvetica');
    
    // Title
    doc.setFontSize(22);
    doc.setTextColor(40, 40, 40);
    doc.text(`${timetable.department.toUpperCase()} - LEVEL ${timetable.level}`, 20, 20);
    
    // Subtitle
    doc.setFontSize(16);
    doc.setTextColor(100, 100, 100);
    doc.text(`${timetable.semester.charAt(0).toUpperCase() + timetable.semester.slice(1)} Semester Timetable`, 20, 30);
    
    // Created by info
    doc.setFontSize(11);
    doc.setTextColor(120, 120, 120);
    doc.text(`Created by: ${timetable.createdBy?.name || 'Unknown'}`, 20, 40);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
    
    // Table setup - larger cells to accommodate full course names
    const startY = 55;
    const cellHeight = 20; // Increased height
    const timeCellWidth = 40; // Increased width
    const dayCellWidth = 35; // Increased width
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
    const timeSlots = ['8:00 AM - 10:00 AM', '10:00 AM - 12:00 PM', '12:00 PM - 2:00 PM', '2:00 PM - 4:00 PM'];
    
    // Draw table headers
    doc.setFillColor(74, 144, 226); // Primary blue
    doc.setDrawColor(74, 144, 226);
    doc.setLineWidth(0.5);
    
    // Time column header
    doc.setFillColor(74, 144, 226);
    doc.setDrawColor(74, 144, 226);
    doc.rect(20, startY, timeCellWidth, cellHeight, 'FD');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('TIME', 20 + timeCellWidth/2, startY + cellHeight/2, { align: 'center' });
    
    // Day headers
    days.forEach((day, index) => {
      const x = 20 + timeCellWidth + (index * dayCellWidth);
      // Set blue background and draw rectangle
      doc.setFillColor(74, 144, 226);
      doc.setDrawColor(74, 144, 226);
      doc.rect(x, startY, dayCellWidth, cellHeight, 'FD');
      // Set white text color and font
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(day.substring(0, 3).toUpperCase(), x + dayCellWidth/2, startY + cellHeight/2, { align: 'center' });
    });
    
    // Draw time slots and courses
    timeSlots.forEach((timeSlot, timeIndex) => {
      const y = startY + cellHeight + (timeIndex * cellHeight);
      
      // Time slot cell
      doc.setFillColor(248, 249, 250); // Light gray
      doc.setDrawColor(200, 200, 200);
      doc.rect(20, y, timeCellWidth, cellHeight, 'FD');
      doc.setTextColor(40, 40, 40);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(timeSlot, 20 + timeCellWidth/2, y + cellHeight/2, { align: 'center' });
      
      // Course cells
      days.forEach((day, dayIndex) => {
        const x = 20 + timeCellWidth + (dayIndex * dayCellWidth);
        
        // Find courses for this time slot and day
        const courses = timetable.courses.filter(course => 
          course.day === day && course.time === timeSlot
        );
        
        if (courses.length === 0) {
          // Empty cell
          doc.setFillColor(255, 255, 255);
          doc.setDrawColor(200, 200, 200);
          doc.rect(x, y, dayCellWidth, cellHeight, 'FD');
        } else {
          // Course cell with light blue background
          doc.setFillColor(240, 248, 255);
          doc.setDrawColor(200, 200, 200);
          doc.rect(x, y, dayCellWidth, cellHeight, 'FD');
          
          // Add course information
          doc.setTextColor(40, 40, 40);
          
          courses.forEach((course, courseIndex) => {
            const courseY = y + 4 + (courseIndex * 6);
            if (courseY < y + cellHeight - 3) {
              // Course code (bold)
              doc.setFontSize(10);
              doc.setFont('helvetica', 'bold');
              doc.text(course.courseCode, x + 2, courseY);
              
              // Course name (full name, wrapped if needed)
              doc.setFontSize(8);
              doc.setFont('helvetica', 'normal');
              
              // Split long course names into multiple lines
              const courseName = course.courseName;
              const maxCharsPerLine = 18; // Characters per line
              
              if (courseName.length <= maxCharsPerLine) {
                doc.text(courseName, x + 2, courseY + 3);
              } else {
                // Split into words and wrap
                const words = courseName.split(' ');
                let currentLine = '';
                let lineY = courseY + 3;
                
                for (let i = 0; i < words.length; i++) {
                  const testLine = currentLine + (currentLine ? ' ' : '') + words[i];
                  if (testLine.length <= maxCharsPerLine && lineY < y + cellHeight - 2) {
                    currentLine = testLine;
                  } else {
                    if (currentLine && lineY < y + cellHeight - 2) {
                      doc.text(currentLine, x + 2, lineY);
                      lineY += 3;
                    }
                    currentLine = words[i];
                  }
                }
                if (currentLine && lineY < y + cellHeight - 2) {
                  doc.text(currentLine, x + 2, lineY);
                }
              }
              
              // Venue (smaller, gray)
              doc.setFontSize(7);
              doc.setTextColor(100, 100, 100);
              doc.text(course.venue, x + 2, y + cellHeight - 3);
              doc.setTextColor(40, 40, 40);
            }
          });
        }
      });
    });
    
    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(9);
    doc.setTextColor(120, 120, 120);
    doc.text('Generated by EduSchedule Timetable Management System', 20, pageHeight - 10);
    
    // Save the PDF
    doc.save(filename);
    
    return true;
  } catch (error) {
    console.error('Error generating enhanced PDF:', error);
    return false;
  }
};

// Alternative PDF export with cleaner layout
export const exportTimetableToPDFClean = (timetable, filename = 'timetable.pdf') => {
  try {
    // Create new PDF document
    const doc = new jsPDF('landscape', 'mm', 'a4');
    
    // Set up fonts and colors
    doc.setFont('helvetica');
    
    // Title
    doc.setFontSize(24);
    doc.setTextColor(40, 40, 40);
    doc.text(`${timetable.department.toUpperCase()} - LEVEL ${timetable.level}`, 20, 20);
    
    // Subtitle
    doc.setFontSize(18);
    doc.setTextColor(100, 100, 100);
    doc.text(`${timetable.semester.charAt(0).toUpperCase() + timetable.semester.slice(1)} Semester Timetable`, 20, 30);
    
    // Created by info
    doc.setFontSize(12);
    doc.setTextColor(120, 120, 120);
    doc.text(`Created by: ${timetable.createdBy?.name || 'Unknown'}`, 20, 40);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
    
    // Table setup - optimized for readability
    const startY = 55;
    const cellHeight = 25; // Much larger cells
    const timeCellWidth = 45; // Wider time column
    const dayCellWidth = 38; // Wider day columns
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
    const timeSlots = ['8:00 AM - 10:00 AM', '10:00 AM - 12:00 PM', '12:00 PM - 2:00 PM', '2:00 PM - 4:00 PM'];
    
    // Draw table headers
    doc.setFillColor(74, 144, 226); // Primary blue
    doc.setDrawColor(74, 144, 226);
    doc.setLineWidth(0.5);
    
    // Time column header
    doc.setFillColor(74, 144, 226);
    doc.setDrawColor(74, 144, 226);
    doc.rect(20, startY, timeCellWidth, cellHeight, 'FD');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('TIME', 20 + timeCellWidth/2, startY + cellHeight/2, { align: 'center' });
    
    // Day headers
    days.forEach((day, index) => {
      const x = 20 + timeCellWidth + (index * dayCellWidth);
      // Set blue background and draw rectangle
      doc.setFillColor(74, 144, 226);
      doc.setDrawColor(74, 144, 226);
      doc.rect(x, startY, dayCellWidth, cellHeight, 'FD');
      // Set white text color and font
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text(day.substring(0, 3).toUpperCase(), x + dayCellWidth/2, startY + cellHeight/2, { align: 'center' });
    });
    
    // Draw time slots and courses
    timeSlots.forEach((timeSlot, timeIndex) => {
      const y = startY + cellHeight + (timeIndex * cellHeight);
      
      // Time slot cell
      doc.setFillColor(248, 249, 250); // Light gray
      doc.setDrawColor(200, 200, 200);
      doc.rect(20, y, timeCellWidth, cellHeight, 'FD');
      doc.setTextColor(40, 40, 40);
      doc.setFontSize(11);
      doc.setFont('helvetica', 'normal');
      doc.text(timeSlot, 20 + timeCellWidth/2, y + cellHeight/2, { align: 'center' });
      
      // Course cells
      days.forEach((day, dayIndex) => {
        const x = 20 + timeCellWidth + (dayIndex * dayCellWidth);
        
        // Find courses for this time slot and day
        const courses = timetable.courses.filter(course => 
          course.day === day && course.time === timeSlot
        );
        
        if (courses.length === 0) {
          // Empty cell
          doc.setFillColor(255, 255, 255);
          doc.setDrawColor(200, 200, 200);
          doc.rect(x, y, dayCellWidth, cellHeight, 'FD');
        } else {
          // Course cell with light blue background
          doc.setFillColor(240, 248, 255);
          doc.setDrawColor(200, 200, 200);
          doc.rect(x, y, dayCellWidth, cellHeight, 'FD');
          
          // Add course information
          doc.setTextColor(40, 40, 40);
          
          courses.forEach((course, courseIndex) => {
            const courseY = y + 6 + (courseIndex * 8);
            if (courseY < y + cellHeight - 5) {
              // Course code (bold, larger)
              doc.setFontSize(12);
              doc.setFont('helvetica', 'bold');
              doc.text(course.courseCode, x + 3, courseY);
              
              // Course name (full name, wrapped properly)
              doc.setFontSize(9);
              doc.setFont('helvetica', 'normal');
              
              // Split long course names into multiple lines
              const courseName = course.courseName;
              const maxCharsPerLine = 22; // More characters per line
              
              if (courseName.length <= maxCharsPerLine) {
                doc.text(courseName, x + 3, courseY + 4);
              } else {
                // Split into words and wrap
                const words = courseName.split(' ');
                let currentLine = '';
                let lineY = courseY + 4;
                
                for (let i = 0; i < words.length; i++) {
                  const testLine = currentLine + (currentLine ? ' ' : '') + words[i];
                  if (testLine.length <= maxCharsPerLine && lineY < y + cellHeight - 5) {
                    currentLine = testLine;
                  } else {
                    if (currentLine && lineY < y + cellHeight - 5) {
                      doc.text(currentLine, x + 3, lineY);
                      lineY += 4;
                    }
                    currentLine = words[i];
                  }
                }
                if (currentLine && lineY < y + cellHeight - 5) {
                  doc.text(currentLine, x + 3, lineY);
                }
              }
              
              // Venue (smaller, gray)
              doc.setFontSize(8);
              doc.setTextColor(100, 100, 100);
              doc.text(course.venue, x + 3, y + cellHeight - 5);
              doc.setTextColor(40, 40, 40);
            }
          });
        }
      });
    });
    
    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.setTextColor(120, 120, 120);
    doc.text('Generated by EduSchedule Timetable Management System', 20, pageHeight - 10);
    
    // Save the PDF
    doc.save(filename);
    
    return true;
  } catch (error) {
    console.error('Error generating clean PDF:', error);
    return false;
  }
};
